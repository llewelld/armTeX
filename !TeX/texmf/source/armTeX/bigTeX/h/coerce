void initialize();
#define initialize_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void println();
#define println_regmem
void zprintchar();
#define printchar(s) zprintchar((ASCIIcode) (s))
#define printchar_regmem register memoryword *eqtb=zeqtb;
void zprint();
#define print(s) zprint((integer) (s))
#define print_regmem register memoryword *eqtb=zeqtb;
void zslowprint();
#define slowprint(s) zslowprint((integer) (s))
#define slowprint_regmem
void zprintnl();
#define printnl(s) zprintnl((strnumber) (s))
#define printnl_regmem
void zprintesc();
#define printesc(s) zprintesc((strnumber) (s))
#define printesc_regmem register memoryword *eqtb=zeqtb;
void zprintthedigs();
#define printthedigs(k) zprintthedigs((eightbits) (k))
#define printthedigs_regmem
void zprintint();
#define printint(n) zprintint((integer) (n))
#define printint_regmem
void zprintcs();
#define printcs(p) zprintcs((integer) (p))
#define printcs_regmem register memoryword *eqtb=zeqtb;
void zsprintcs();
#define sprintcs(p) zsprintcs((halfword) (p))
#define sprintcs_regmem
void zprintfilename();
#define printfilename(n, a, e) zprintfilename((integer) (n), (integer) (a), (integer) (e))
#define printfilename_regmem
void zprintsize();
#define printsize(s) zprintsize((integer) (s))
#define printsize_regmem
void zprintwritewhatsit();
#define printwritewhatsit(s, p) zprintwritewhatsit((strnumber) (s), (halfword) (p))
#define printwritewhatsit_regmem register memoryword *mem=zmem;
void jumpout();
#define jumpout_regmem
void error();
#define error_regmem
void zfatalerror();
#define fatalerror(s) zfatalerror((strnumber) (s))
#define fatalerror_regmem
void zoverflow();
#define overflow(s, n) zoverflow((strnumber) (s), (integer) (n))
#define overflow_regmem
void zconfusion();
#define confusion(s) zconfusion((strnumber) (s))
#define confusion_regmem
boolean initterminal();
#define initterminal_regmem
strnumber makestring();
#define makestring_regmem
boolean zstreqbuf();
#define streqbuf(s, k) zstreqbuf((strnumber) (s), (integer) (k))
#define streqbuf_regmem
boolean zstreqstr();
#define streqstr(s, t) zstreqstr((strnumber) (s), (strnumber) (t))
#define streqstr_regmem
boolean getstringsstarted();
#define getstringsstarted_regmem
void zprinttwo();
#define printtwo(n) zprinttwo((integer) (n))
#define printtwo_regmem
void zprinthex();
#define printhex(n) zprinthex((integer) (n))
#define printhex_regmem
void zprintromanint();
#define printromanint(n) zprintromanint((integer) (n))
#define printromanint_regmem
void printcurrentstring();
#define printcurrentstring_regmem
void terminput();
#define terminput_regmem
void zinterror();
#define interror(n) zinterror((integer) (n))
#define interror_regmem
void normalizeselector();
#define normalizeselector_regmem
void pauseforinstructions();
#define pauseforinstructions_regmem
integer zhalf();
#define half(x) zhalf((integer) (x))
#define half_regmem
scaled zrounddecimals();
#define rounddecimals(k) zrounddecimals((smallnumber) (k))
#define rounddecimals_regmem
void zprintscaled();
#define printscaled(s) zprintscaled((scaled) (s))
#define printscaled_regmem
scaled zmultandadd();
#define multandadd(n, x, y, maxanswer) zmultandadd((integer) (n), (scaled) (x), (scaled) (y), (scaled) (maxanswer))
#define multandadd_regmem
scaled zxovern();
#define xovern(x, n) zxovern((scaled) (x), (integer) (n))
#define xovern_regmem
scaled zxnoverd();
#define xnoverd(x, n, d) zxnoverd((scaled) (x), (integer) (n), (integer) (d))
#define xnoverd_regmem
halfword zbadness();
#define badness(t, s) zbadness((scaled) (t), (scaled) (s))
#define badness_regmem
void zprintword();
#define printword(w) zprintword((memoryword) (w))
#define printword_regmem
void zshowtokenlist();
#define showtokenlist(p, q, l) zshowtokenlist((integer) (p), (integer) (q), (integer) (l))
#define showtokenlist_regmem register memoryword *mem=zmem;
void runaway();
#define runaway_regmem register memoryword *mem=zmem;
halfword getavail();
#define getavail_regmem register memoryword *mem=zmem;
void zflushlist();
#define flushlist(p) zflushlist((halfword) (p))
#define flushlist_regmem register memoryword *mem=zmem;
halfword zgetnode();
#define getnode(s) zgetnode((integer) (s))
#define getnode_regmem register memoryword *mem=zmem;
void zfreenode();
#define freenode(p, s) zfreenode((halfword) (p), (halfword) (s))
#define freenode_regmem register memoryword *mem=zmem;
void sortavail();
#define sortavail_regmem register memoryword *mem=zmem;
halfword newnullbox();
#define newnullbox_regmem register memoryword *mem=zmem;
halfword newrule();
#define newrule_regmem register memoryword *mem=zmem;
halfword znewligature();
#define newligature(f, c, q) znewligature((quarterword) (f), (quarterword) (c), (halfword) (q))
#define newligature_regmem register memoryword *mem=zmem;
halfword znewligitem();
#define newligitem(c) znewligitem((quarterword) (c))
#define newligitem_regmem register memoryword *mem=zmem;
halfword newdisc();
#define newdisc_regmem register memoryword *mem=zmem;
halfword znewmath();
#define newmath(w, s) znewmath((scaled) (w), (smallnumber) (s))
#define newmath_regmem register memoryword *mem=zmem;
halfword znewspec();
#define newspec(p) znewspec((halfword) (p))
#define newspec_regmem register memoryword *mem=zmem;
halfword znewparamglue();
#define newparamglue(n) znewparamglue((smallnumber) (n))
#define newparamglue_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
halfword znewglue();
#define newglue(q) znewglue((halfword) (q))
#define newglue_regmem register memoryword *mem=zmem;
halfword znewskipparam();
#define newskipparam(n) znewskipparam((smallnumber) (n))
#define newskipparam_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
halfword znewkern();
#define newkern(w) znewkern((scaled) (w))
#define newkern_regmem register memoryword *mem=zmem;
halfword znewpenalty();
#define newpenalty(m) znewpenalty((integer) (m))
#define newpenalty_regmem register memoryword *mem=zmem;
void zcheckmem();
#define checkmem(printlocs) zcheckmem((boolean) (printlocs))
#define checkmem_regmem register memoryword *mem=zmem;
void zsearchmem();
#define searchmem(p) zsearchmem((halfword) (p))
#define searchmem_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zshortdisplay();
#define shortdisplay(p) zshortdisplay((integer) (p))
#define shortdisplay_regmem register memoryword *mem=zmem;
void zprintfontandchar();
#define printfontandchar(p) zprintfontandchar((integer) (p))
#define printfontandchar_regmem register memoryword *mem=zmem;
void zprintmark();
#define printmark(p) zprintmark((integer) (p))
#define printmark_regmem register memoryword *mem=zmem;
void zprintruledimen();
#define printruledimen(d) zprintruledimen((scaled) (d))
#define printruledimen_regmem
void zprintglue();
#define printglue(d, order, s) zprintglue((scaled) (d), (integer) (order), (strnumber) (s))
#define printglue_regmem
void zprintspec();
#define printspec(p, s) zprintspec((integer) (p), (strnumber) (s))
#define printspec_regmem register memoryword *mem=zmem;
void zprintfamandchar();
#define printfamandchar(p) zprintfamandchar((halfword) (p))
#define printfamandchar_regmem register memoryword *mem=zmem;
void zprintdelimiter();
#define printdelimiter(p) zprintdelimiter((halfword) (p))
#define printdelimiter_regmem register memoryword *mem=zmem;
void zprintsubsidiarydata();
#define printsubsidiarydata(p, c) zprintsubsidiarydata((halfword) (p), (ASCIIcode) (c))
#define printsubsidiarydata_regmem register memoryword *mem=zmem;
void zprintstyle();
#define printstyle(c) zprintstyle((integer) (c))
#define printstyle_regmem
void zprintskipparam();
#define printskipparam(n) zprintskipparam((integer) (n))
#define printskipparam_regmem
void zshownodelist();
#define shownodelist(p) zshownodelist((integer) (p))
#define shownodelist_regmem register memoryword *mem=zmem;
void zshowbox();
#define showbox(p) zshowbox((halfword) (p))
#define showbox_regmem register memoryword *eqtb=zeqtb;
void zdeletetokenref();
#define deletetokenref(p) zdeletetokenref((halfword) (p))
#define deletetokenref_regmem register memoryword *mem=zmem;
void zdeleteglueref();
#define deleteglueref(p) zdeleteglueref((halfword) (p))
#define deleteglueref_regmem register memoryword *mem=zmem;
void zflushnodelist();
#define flushnodelist(p) zflushnodelist((halfword) (p))
#define flushnodelist_regmem register memoryword *mem=zmem;
halfword zcopynodelist();
#define copynodelist(p) zcopynodelist((halfword) (p))
#define copynodelist_regmem register memoryword *mem=zmem;
void zprintmode();
#define printmode(m) zprintmode((integer) (m))
#define printmode_regmem
void pushnest();
#define pushnest_regmem
void popnest();
#define popnest_regmem register memoryword *mem=zmem;
void showactivities();
#define showactivities_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zprintparam();
#define printparam(n) zprintparam((integer) (n))
#define printparam_regmem
void begindiagnostic();
#define begindiagnostic_regmem register memoryword *eqtb=zeqtb;
void zenddiagnostic();
#define enddiagnostic(blankline) zenddiagnostic((boolean) (blankline))
#define enddiagnostic_regmem
void zprintlengthparam();
#define printlengthparam(n) zprintlengthparam((integer) (n))
#define printlengthparam_regmem
void zprintcmdchr();
#define printcmdchr(cmd, chrcode) zprintcmdchr((quarterword) (cmd), (halfword) (chrcode))
#define printcmdchr_regmem
void zshoweqtb();
#define showeqtb(n) zshoweqtb((halfword) (n))
#define showeqtb_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
halfword zidlookup();
#define idlookup(j, l) zidlookup((integer) (j), (integer) (l))
#define idlookup_regmem
void zprimitive();
#define primitive(s, c, o) zprimitive((strnumber) (s), (quarterword) (c), (halfword) (o))
#define primitive_regmem register memoryword *eqtb=zeqtb;
void znewsavelevel();
#define newsavelevel(c) znewsavelevel((groupcode) (c))
#define newsavelevel_regmem
void zeqdestroy();
#define eqdestroy(w) zeqdestroy((memoryword) (w))
#define eqdestroy_regmem register memoryword *mem=zmem;
void zeqsave();
#define eqsave(p, l) zeqsave((halfword) (p), (quarterword) (l))
#define eqsave_regmem register memoryword *eqtb=zeqtb;
void zeqdefine();
#define eqdefine(p, t, e) zeqdefine((halfword) (p), (quarterword) (t), (halfword) (e))
#define eqdefine_regmem register memoryword *eqtb=zeqtb;
void zeqworddefine();
#define eqworddefine(p, w) zeqworddefine((halfword) (p), (integer) (w))
#define eqworddefine_regmem register memoryword *eqtb=zeqtb;
void zgeqdefine();
#define geqdefine(p, t, e) zgeqdefine((halfword) (p), (quarterword) (t), (halfword) (e))
#define geqdefine_regmem register memoryword *eqtb=zeqtb;
void zgeqworddefine();
#define geqworddefine(p, w) zgeqworddefine((halfword) (p), (integer) (w))
#define geqworddefine_regmem register memoryword *eqtb=zeqtb;
void zsaveforafter();
#define saveforafter(t) zsaveforafter((halfword) (t))
#define saveforafter_regmem
void zrestoretrace();
#define restoretrace(p, s) zrestoretrace((halfword) (p), (strnumber) (s))
#define restoretrace_regmem
void unsave();
#define unsave_regmem register memoryword *eqtb=zeqtb;
void preparemag();
#define preparemag_regmem register memoryword *eqtb=zeqtb;
void ztokenshow();
#define tokenshow(p) ztokenshow((halfword) (p))
#define tokenshow_regmem register memoryword *mem=zmem;
void printmeaning();
#define printmeaning_regmem
void showcurcmdchr();
#define showcurcmdchr_regmem
void showcontext();
#define showcontext_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zbegintokenlist();
#define begintokenlist(p, t) zbegintokenlist((halfword) (p), (quarterword) (t))
#define begintokenlist_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void endtokenlist();
#define endtokenlist_regmem
void backinput();
#define backinput_regmem register memoryword *mem=zmem;
void backerror();
#define backerror_regmem
void inserror();
#define inserror_regmem
void beginfilereading();
#define beginfilereading_regmem
void endfilereading();
#define endfilereading_regmem
void clearforerrorprompt();
#define clearforerrorprompt_regmem
void checkoutervalidity();
#define checkoutervalidity_regmem register memoryword *mem=zmem;
void getnext();
#define getnext_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void firmuptheline();
#define firmuptheline_regmem register memoryword *eqtb=zeqtb;
void gettoken();
#define gettoken_regmem
void macrocall();
#define macrocall_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void insertrelax();
#define insertrelax_regmem
void expand();
#define expand_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void getxtoken();
#define getxtoken_regmem
void xtoken();
#define xtoken_regmem
void scanleftbrace();
#define scanleftbrace_regmem
void scanoptionalequals();
#define scanoptionalequals_regmem
boolean zscankeyword();
#define scankeyword(s) zscankeyword((strnumber) (s))
#define scankeyword_regmem register memoryword *mem=zmem;
void muerror();
#define muerror_regmem
void scaneightbitint();
#define scaneightbitint_regmem
void scancharnum();
#define scancharnum_regmem
void scanfourbitint();
#define scanfourbitint_regmem
void scanfifteenbitint();
#define scanfifteenbitint_regmem
void scantwentysevenbitint();
#define scantwentysevenbitint_regmem
void scanfontident();
#define scanfontident_regmem register memoryword *eqtb=zeqtb;
void zfindfontdimen();
#define findfontdimen(writing) zfindfontdimen((boolean) (writing))
#define findfontdimen_regmem
void zscansomethinginternal();
#define scansomethinginternal(level, negative) zscansomethinginternal((smallnumber) (level), (boolean) (negative))
#define scansomethinginternal_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void scanint();
#define scanint_regmem
void zscandimen();
#define scandimen(mu, inf, shortcut) zscandimen((boolean) (mu), (boolean) (inf), (boolean) (shortcut))
#define scandimen_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zscanglue();
#define scanglue(level) zscanglue((smallnumber) (level))
#define scanglue_regmem register memoryword *mem=zmem;
halfword scanrulespec();
#define scanrulespec_regmem register memoryword *mem=zmem;
halfword zstrtoks();
#define strtoks(b) zstrtoks((poolpointer) (b))
#define strtoks_regmem register memoryword *mem=zmem;
halfword thetoks();
#define thetoks_regmem register memoryword *mem=zmem;
void insthetoks();
#define insthetoks_regmem register memoryword *mem=zmem;
void convtoks();
#define convtoks_regmem register memoryword *mem=zmem;
halfword zscantoks();
#define scantoks(macrodef, xpand) zscantoks((boolean) (macrodef), (boolean) (xpand))
#define scantoks_regmem register memoryword *mem=zmem;
void zreadtoks();
#define readtoks(n, r) zreadtoks((integer) (n), (halfword) (r))
#define readtoks_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void passtext();
#define passtext_regmem
void zchangeiflimit();
#define changeiflimit(l, p) zchangeiflimit((smallnumber) (l), (halfword) (p))
#define changeiflimit_regmem register memoryword *mem=zmem;
void conditional();
#define conditional_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void beginname();
#define beginname_regmem
boolean zmorename();
#define morename(c) zmorename((ASCIIcode) (c))
#define morename_regmem
void endname();
#define endname_regmem
void zpackfilename();
#define packfilename(n, a, e) zpackfilename((strnumber) (n), (strnumber) (a), (strnumber) (e))
#define packfilename_regmem
void zpackbufferedname();
#define packbufferedname(n, a, b) zpackbufferedname((smallnumber) (n), (integer) (a), (integer) (b))
#define packbufferedname_regmem
strnumber makenamestring();
#define makenamestring_regmem
strnumber zamakenamestring();
#define amakenamestring(f) zamakenamestring((alphafile *) &(f))
#define amakenamestring_regmem
strnumber zbmakenamestring();
#define bmakenamestring(f) zbmakenamestring((bytefile *) &(f))
#define bmakenamestring_regmem
strnumber zwmakenamestring();
#define wmakenamestring(f) zwmakenamestring((wordfile *) &(f))
#define wmakenamestring_regmem
void scanfilename();
#define scanfilename_regmem
void zpackjobname();
#define packjobname(s) zpackjobname((strnumber) (s))
#define packjobname_regmem
void zpromptfilename();
#define promptfilename(s, e) zpromptfilename((strnumber) (s), (strnumber) (e))
#define promptfilename_regmem
void openlogfile();
#define openlogfile_regmem register memoryword *eqtb=zeqtb;
void startinput();
#define startinput_regmem register memoryword *eqtb=zeqtb;
internalfontnumber zreadfontinfo();
#define readfontinfo(u, nom, aire, s) zreadfontinfo((halfword) (u), (strnumber) (nom), (strnumber) (aire), (scaled) (s))
#define readfontinfo_regmem register memoryword *eqtb=zeqtb;
void zcharwarning();
#define charwarning(f, c) zcharwarning((internalfontnumber) (f), (eightbits) (c))
#define charwarning_regmem register memoryword *eqtb=zeqtb;
halfword znewcharacter();
#define newcharacter(f, c) znewcharacter((internalfontnumber) (f), (eightbits) (c))
#define newcharacter_regmem register memoryword *mem=zmem;
void dviswap();
#define dviswap_regmem
void zdvifour();
#define dvifour(x) zdvifour((integer) (x))
#define dvifour_regmem
void zdvipop();
#define dvipop(l) zdvipop((integer) (l))
#define dvipop_regmem
void zdvifontdef();
#define dvifontdef(f) zdvifontdef((internalfontnumber) (f))
#define dvifontdef_regmem
void zmovement();
#define movement(w, o) zmovement((scaled) (w), (eightbits) (o))
#define movement_regmem register memoryword *mem=zmem;
void zprunemovements();
#define prunemovements(l) zprunemovements((integer) (l))
#define prunemovements_regmem register memoryword *mem=zmem;
void zspecialout();
#define specialout(p) zspecialout((halfword) (p))
#define specialout_regmem register memoryword *mem=zmem;
void zwriteout();
#define writeout(p) zwriteout((halfword) (p))
#define writeout_regmem register memoryword *mem=zmem;
void zoutwhat();
#define outwhat(p) zoutwhat((halfword) (p))
#define outwhat_regmem register memoryword *mem=zmem;
void hlistout();
#define hlistout_regmem register memoryword *mem=zmem;
void vlistout();
#define vlistout_regmem register memoryword *mem=zmem;
void zshipout();
#define shipout(p) zshipout((halfword) (p))
#define shipout_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zscanspec();
#define scanspec(c, threecodes) zscanspec((groupcode) (c), (boolean) (threecodes))
#define scanspec_regmem
halfword zhpack();
#define hpack(p, w, m) zhpack((halfword) (p), (scaled) (w), (smallnumber) (m))
#define hpack_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
halfword zvpackage();
#define vpackage(p, h, m, l) zvpackage((halfword) (p), (scaled) (h), (smallnumber) (m), (scaled) (l))
#define vpackage_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zappendtovlist();
#define appendtovlist(b) zappendtovlist((halfword) (b))
#define appendtovlist_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
halfword newnoad();
#define newnoad_regmem register memoryword *mem=zmem;
halfword znewstyle();
#define newstyle(s) znewstyle((smallnumber) (s))
#define newstyle_regmem register memoryword *mem=zmem;
halfword newchoice();
#define newchoice_regmem register memoryword *mem=zmem;
void showinfo();
#define showinfo_regmem register memoryword *mem=zmem;
halfword zfractionrule();
#define fractionrule(t) zfractionrule((scaled) (t))
#define fractionrule_regmem register memoryword *mem=zmem;
halfword zoverbar();
#define overbar(b, k, t) zoverbar((halfword) (b), (scaled) (k), (scaled) (t))
#define overbar_regmem register memoryword *mem=zmem;
halfword zcharbox();
#define charbox(f, c) zcharbox((internalfontnumber) (f), (quarterword) (c))
#define charbox_regmem register memoryword *mem=zmem;
void zstackintobox();
#define stackintobox(b, f, c) zstackintobox((halfword) (b), (internalfontnumber) (f), (quarterword) (c))
#define stackintobox_regmem register memoryword *mem=zmem;
scaled zheightplusdepth();
#define heightplusdepth(f, c) zheightplusdepth((internalfontnumber) (f), (quarterword) (c))
#define heightplusdepth_regmem
halfword zvardelimiter();
#define vardelimiter(d, s, v) zvardelimiter((halfword) (d), (smallnumber) (s), (scaled) (v))
#define vardelimiter_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
halfword zrebox();
#define rebox(b, w) zrebox((halfword) (b), (scaled) (w))
#define rebox_regmem register memoryword *mem=zmem;
halfword zmathglue();
#define mathglue(g, m) zmathglue((halfword) (g), (scaled) (m))
#define mathglue_regmem register memoryword *mem=zmem;
void zmathkern();
#define mathkern(p, m) zmathkern((halfword) (p), (scaled) (m))
#define mathkern_regmem register memoryword *mem=zmem;
void flushmath();
#define flushmath_regmem register memoryword *mem=zmem;
halfword zcleanbox();
#define cleanbox(p, s) zcleanbox((halfword) (p), (smallnumber) (s))
#define cleanbox_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zfetch();
#define fetch(a) zfetch((halfword) (a))
#define fetch_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zmakeover();
#define makeover(q) zmakeover((halfword) (q))
#define makeover_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zmakeunder();
#define makeunder(q) zmakeunder((halfword) (q))
#define makeunder_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zmakevcenter();
#define makevcenter(q) zmakevcenter((halfword) (q))
#define makevcenter_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zmakeradical();
#define makeradical(q) zmakeradical((halfword) (q))
#define makeradical_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zmakemathaccent();
#define makemathaccent(q) zmakemathaccent((halfword) (q))
#define makemathaccent_regmem register memoryword *mem=zmem;
void zmakefraction();
#define makefraction(q) zmakefraction((halfword) (q))
#define makefraction_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
scaled zmakeop();
#define makeop(q) zmakeop((halfword) (q))
#define makeop_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zmakeord();
#define makeord(q) zmakeord((halfword) (q))
#define makeord_regmem register memoryword *mem=zmem;
void zmakescripts();
#define makescripts(q, delta) zmakescripts((halfword) (q), (scaled) (delta))
#define makescripts_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
smallnumber zmakeleftright();
#define makeleftright(q, style, maxd, maxh) zmakeleftright((halfword) (q), (smallnumber) (style), (scaled) (maxd), (scaled) (maxh))
#define makeleftright_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void mlisttohlist();
#define mlisttohlist_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void pushalignment();
#define pushalignment_regmem register memoryword *mem=zmem;
void popalignment();
#define popalignment_regmem register memoryword *mem=zmem;
void getpreambletoken();
#define getpreambletoken_regmem register memoryword *eqtb=zeqtb;
void initalign();
#define initalign_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zinitspan();
#define initspan(p) zinitspan((halfword) (p))
#define initspan_regmem
void initrow();
#define initrow_regmem register memoryword *mem=zmem;
void initcol();
#define initcol_regmem register memoryword *mem=zmem;
boolean fincol();
#define fincol_regmem register memoryword *mem=zmem;
void finrow();
#define finrow_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void finalign();
#define finalign_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void alignpeek();
#define alignpeek_regmem
halfword zfiniteshrink();
#define finiteshrink(p) zfiniteshrink((halfword) (p))
#define finiteshrink_regmem register memoryword *mem=zmem;
void ztrybreak();
#define trybreak(pi, breaktype) ztrybreak((integer) (pi), (smallnumber) (breaktype))
#define trybreak_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zpostlinebreak();
#define postlinebreak(finalwidowpenalty) zpostlinebreak((integer) (finalwidowpenalty))
#define postlinebreak_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
smallnumber zreconstitute();
#define reconstitute(j, n, bchar, hchar) zreconstitute((smallnumber) (j), (smallnumber) (n), (halfword) (bchar), (halfword) (hchar))
#define reconstitute_regmem register memoryword *mem=zmem;
void hyphenate();
#define hyphenate_regmem register memoryword *mem=zmem;
trieopcode znewtrieop();
#define newtrieop(d, n, v) znewtrieop((smallnumber) (d), (smallnumber) (n), (trieopcode) (v))
#define newtrieop_regmem
triepointer ztrienode();
#define trienode(p) ztrienode((triepointer) (p))
#define trienode_regmem
triepointer zcompresstrie();
#define compresstrie(p) zcompresstrie((triepointer) (p))
#define compresstrie_regmem
void zfirstfit();
#define firstfit(p) zfirstfit((triepointer) (p))
#define firstfit_regmem
void ztriepack();
#define triepack(p) ztriepack((triepointer) (p))
#define triepack_regmem
void ztriefix();
#define triefix(p) ztriefix((triepointer) (p))
#define triefix_regmem
void newpatterns();
#define newpatterns_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void inittrie();
#define inittrie_regmem
void zlinebreak();
#define linebreak(finalwidowpenalty) zlinebreak((integer) (finalwidowpenalty))
#define linebreak_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void newhyphexceptions();
#define newhyphexceptions_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
halfword zprunepagetop();
#define prunepagetop(p) zprunepagetop((halfword) (p))
#define prunepagetop_regmem register memoryword *mem=zmem;
halfword zvertbreak();
#define vertbreak(p, h, d) zvertbreak((halfword) (p), (scaled) (h), (scaled) (d))
#define vertbreak_regmem register memoryword *mem=zmem;
halfword zvsplit();
#define vsplit(n, h) zvsplit((eightbits) (n), (scaled) (h))
#define vsplit_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void printtotals();
#define printtotals_regmem
void zfreezepagespecs();
#define freezepagespecs(s) zfreezepagespecs((smallnumber) (s))
#define freezepagespecs_regmem register memoryword *eqtb=zeqtb;
void zboxerror();
#define boxerror(n) zboxerror((eightbits) (n))
#define boxerror_regmem register memoryword *eqtb=zeqtb;
void zensurevbox();
#define ensurevbox(n) zensurevbox((eightbits) (n))
#define ensurevbox_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zfireup();
#define fireup(c) zfireup((halfword) (c))
#define fireup_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void buildpage();
#define buildpage_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void appspace();
#define appspace_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void insertdollarsign();
#define insertdollarsign_regmem
void youcant();
#define youcant_regmem
void reportillegalcase();
#define reportillegalcase_regmem
boolean privileged();
#define privileged_regmem
boolean itsallover();
#define itsallover_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void appendglue();
#define appendglue_regmem register memoryword *mem=zmem;
void appendkern();
#define appendkern_regmem register memoryword *mem=zmem;
void offsave();
#define offsave_regmem register memoryword *mem=zmem;
void extrarightbrace();
#define extrarightbrace_regmem
void normalparagraph();
#define normalparagraph_regmem register memoryword *eqtb=zeqtb;
void zboxend();
#define boxend(boxcontext) zboxend((integer) (boxcontext))
#define boxend_regmem register memoryword *mem=zmem;
void zbeginbox();
#define beginbox(boxcontext) zbeginbox((integer) (boxcontext))
#define beginbox_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zscanbox();
#define scanbox(boxcontext) zscanbox((integer) (boxcontext))
#define scanbox_regmem
void zpackage();
#define package(c) zpackage((smallnumber) (c))
#define package_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
smallnumber znormmin();
#define normmin(h) znormmin((integer) (h))
#define normmin_regmem
void znewgraf();
#define newgraf(indented) znewgraf((boolean) (indented))
#define newgraf_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void indentinhmode();
#define indentinhmode_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void headforvmode();
#define headforvmode_regmem
void endgraf();
#define endgraf_regmem register memoryword *eqtb=zeqtb;
void begininsertoradjust();
#define begininsertoradjust_regmem
void makemark();
#define makemark_regmem register memoryword *mem=zmem;
void appendpenalty();
#define appendpenalty_regmem register memoryword *mem=zmem;
void deletelast();
#define deletelast_regmem register memoryword *mem=zmem;
void unpackage();
#define unpackage_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void appenditaliccorrection();
#define appenditaliccorrection_regmem register memoryword *mem=zmem;
void appenddiscretionary();
#define appenddiscretionary_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void builddiscretionary();
#define builddiscretionary_regmem register memoryword *mem=zmem;
void makeaccent();
#define makeaccent_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void alignerror();
#define alignerror_regmem
void noalignerror();
#define noalignerror_regmem
void omiterror();
#define omiterror_regmem
void doendv();
#define doendv_regmem
void cserror();
#define cserror_regmem
void zpushmath();
#define pushmath(c) zpushmath((groupcode) (c))
#define pushmath_regmem
void initmath();
#define initmath_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void starteqno();
#define starteqno_regmem register memoryword *eqtb=zeqtb;
void zscanmath();
#define scanmath(p) zscanmath((halfword) (p))
#define scanmath_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void zsetmathchar();
#define setmathchar(c) zsetmathchar((integer) (c))
#define setmathchar_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void mathlimitswitch();
#define mathlimitswitch_regmem register memoryword *mem=zmem;
void zscandelimiter();
#define scandelimiter(p, r) zscandelimiter((halfword) (p), (boolean) (r))
#define scandelimiter_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void mathradical();
#define mathradical_regmem register memoryword *mem=zmem;
void mathac();
#define mathac_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void appendchoices();
#define appendchoices_regmem register memoryword *mem=zmem;
halfword zfinmlist();
#define finmlist(p) zfinmlist((halfword) (p))
#define finmlist_regmem register memoryword *mem=zmem;
void buildchoices();
#define buildchoices_regmem register memoryword *mem=zmem;
void subsup();
#define subsup_regmem register memoryword *mem=zmem;
void mathfraction();
#define mathfraction_regmem register memoryword *mem=zmem;
void mathleftright();
#define mathleftright_regmem register memoryword *mem=zmem;
void aftermath();
#define aftermath_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void resumeafterdisplay();
#define resumeafterdisplay_regmem register memoryword *eqtb=zeqtb;
void getrtoken();
#define getrtoken_regmem
void trapzeroglue();
#define trapzeroglue_regmem register memoryword *mem=zmem;
void zdoregistercommand();
#define doregistercommand(a) zdoregistercommand((smallnumber) (a))
#define doregistercommand_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void alteraux();
#define alteraux_regmem
void alterprevgraf();
#define alterprevgraf_regmem
void alterpagesofar();
#define alterpagesofar_regmem
void alterinteger();
#define alterinteger_regmem
void alterboxdimen();
#define alterboxdimen_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void znewfont();
#define newfont(a) znewfont((smallnumber) (a))
#define newfont_regmem register memoryword *eqtb=zeqtb;
void newinteraction();
#define newinteraction_regmem
void prefixedcommand();
#define prefixedcommand_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void doassignments();
#define doassignments_regmem
void openorclosein();
#define openorclosein_regmem
void issuemessage();
#define issuemessage_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void shiftcase();
#define shiftcase_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void showwhatever();
#define showwhatever_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void storefmtfile();
#define storefmtfile_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void znewwhatsit();
#define newwhatsit(s, w) znewwhatsit((smallnumber) (s), (smallnumber) (w))
#define newwhatsit_regmem register memoryword *mem=zmem;
void znewwritewhatsit();
#define newwritewhatsit(w) znewwritewhatsit((smallnumber) (w))
#define newwritewhatsit_regmem register memoryword *mem=zmem;
void doextension();
#define doextension_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void fixlanguage();
#define fixlanguage_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void handlerightbrace();
#define handlerightbrace_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void maincontrol();
#define maincontrol_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void giveerrhelp();
#define giveerrhelp_regmem register memoryword *eqtb=zeqtb;
boolean openfmtfile();
#define openfmtfile_regmem
boolean loadfmtfile();
#define loadfmtfile_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void closefilesandterminate();
#define closefilesandterminate_regmem register memoryword *eqtb=zeqtb;
void finalcleanup();
#define finalcleanup_regmem register memoryword *mem=zmem;
void initprim();
#define initprim_regmem register memoryword *eqtb=zeqtb;
void debughelp();
#define debughelp_regmem register memoryword *mem=zmem, *eqtb=zeqtb;
void texbody();
#define texbody_regmem register memoryword *eqtb=zeqtb;
